// /api/mint.js

import { ethers } from 'ethers';
import axios from 'axios';
import FormData from 'form-data';
import fs from 'fs/promises';
import path from 'path';

export default async function handler(req, res) {
  console.log('üöÄ Mint API called');

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  try {
    const { imagePath, userAddress, imageName } = req.body;
    if (!imagePath || !userAddress || !imageName) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    console.log('üì¶ Uploading image to Pinata:', imagePath);

    const imageBuffer = await fs.readFile(path.join(process.cwd(), imagePath));
    const formData = new FormData();
    formData.append('file', imageBuffer, { filename: imageName });

    const imageUploadResponse = await axios.post(
      'https://api.pinata.cloud/pinning/pinFileToIPFS',
      formData,
      {
        headers: {
          ...formData.getHeaders(),
          pinata_api_key: process.env.PINATA_API_KEY,
          pinata_secret_api_key: process.env.PINATA_SECRET_API_KEY,
        },
      }
    );

    const imageCID = imageUploadResponse.data.IpfsHash;
    console.log('üñºÔ∏è Image uploaded to IPFS:', imageCID);

    const metadata = {
      name: `CHAINVERS NFT - ${imageName}`,
      description: 'Cropped and generated by CHAINVERS',
      image: `https://gateway.pinata.cloud/ipfs/${imageCID}`,
    };

    const metadataUploadResponse = await axios.post(
      'https://api.pinata.cloud/pinning/pinJSONToIPFS',
      metadata,
      {
        headers: {
          pinata_api_key: process.env.PINATA_API_KEY,
          pinata_secret_api_key: process.env.PINATA_SECRET_API_KEY,
        },
      }
    );

    const metadataCID = metadataUploadResponse.data.IpfsHash;
    const tokenURI = `https://gateway.pinata.cloud/ipfs/${metadataCID}`;
    console.log('üìÑ Metadata uploaded:', tokenURI);

    // Blockchain setup
    const provider = new ethers.JsonRpcProvider(process.env.INFURA_URL);
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
    const abi = JSON.parse(process.env.CONTRACT_ABI);
    const contract = new ethers.Contract(process.env.CONTRACT_ADDRESS, abi, wallet);

    console.log('üß† Calling smart contract createOriginal');

    const tx = await contract.createOriginal(userAddress, tokenURI);
    const receipt = await tx.wait();

    console.log('‚úÖ NFT minted in transaction:', receipt.transactionHash);

    return res.status(200).json({
      success: true,
      ipfs: imageCID,
      metadata: metadataCID,
      tokenURI,
      txHash: receipt.transactionHash,
    });
  } catch (error) {
    console.error('‚ùå Error in mint.js:', error);
    return res.status(500).json({ error: error.message || 'Server error' });
  }
}