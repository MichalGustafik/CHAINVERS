import { v4 as uuidv4 } from "uuid";

// Funkcia na zobrazenie logov s timestampom
const log = (message, ...args) => {
    const now = new Date().toISOString();
    console.log(`[${now}]`, message, ...args);
};

export default async function handler(req, res) {
    if (req.method !== "POST") {
        log("‚ùå [CHAINWEBHOOK] Nepodporovan√° HTTP met√≥da:", req.method);
        return res.status(405).json({ error: "Method Not Allowed" });
    }

    try {
        const { crop_id, wallet, image_base64 } = req.body;

        // Overenie pr√≠tomnosti povinn√Ωch √∫dajov
        if (!crop_id || !wallet || !image_base64) {
            log("‚ö†Ô∏è [CHAINWEBHOOK] Ne√∫pln√© √∫daje:", req.body);
            return res.status(400).json({ error: "Ch√Ωbaj√∫ √∫daje" });
        }

        log("üì• [CHAINWEBHOOK] Prijat√© √∫daje:", { crop_id, wallet, image_base64_length: image_base64.length });

        // === 1. Upload obr√°zka na Pinata ===
        log("üì° [PINATA] Nahr√°vanie obr√°zka...");
        const buffer = Buffer.from(image_base64, "base64");

        const formData = new FormData();
        formData.append("file", new Blob([buffer]), `${crop_id}.png`);

        const imageUpload = await fetch("https://api.pinata.cloud/pinning/pinFileToIPFS", {
            method: "POST",
            headers: {
                Authorization: `Bearer ${process.env.PINATA_JWT}`
            },
            body: formData
        });

        const imageResult = await imageUpload.json();
        log("üñºÔ∏è [PINATA] V√Ωsledok obr√°zka:", imageResult);

        if (!imageResult.IpfsHash) {
            log("‚ùå [PINATA] Obr√°zok sa nepodarilo nahra≈•.", imageResult);
            return res.status(500).json({ error: "Nepodarilo sa nahra≈• obr√°zok", detail: imageResult });
        }

        const imageURI = `ipfs://${imageResult.IpfsHash}`;

        // === 2. Upload metad√°t ===
        const metadata = {
            name: `Chainvers NFT ${crop_id}`,
            description: "NFT z CHAINVERS",
            image: imageURI,
            attributes: [{ trait_type: "Crop ID", value: crop_id }]
        };

        log("üì¶ [PINATA] Nahr√°vanie metad√°t...");
        const metadataUpload = await fetch("https://api.pinata.cloud/pinning/pinJSONToIPFS", {
            method: "POST",
            headers: {
                Authorization: `Bearer ${process.env.PINATA_JWT}`,
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                pinataMetadata: {
                    name: `chainvers-metadata-${crop_id}`
                },
                pinataContent: metadata
            })
        });

        const metadataResult = await metadataUpload.json();
        log("üìÑ [PINATA] V√Ωsledok metad√°t:", metadataResult);

        if (!metadataResult.IpfsHash) {
            log("‚ùå [PINATA] Nepodarilo sa nahra≈• metad√°ta.", metadataResult);
            return res.status(500).json({ error: "Nepodarilo sa nahra≈• metad√°ta", detail: metadataResult });
        }

        const metadataURI = `ipfs://${metadataResult.IpfsHash}`;

        // === 3. Volanie mintchain.js (presmerovanie na spr√°vnu URL) ===
        log("üöÄ [CHAINWEBHOOK] Pr√≠prava na volanie mintchain.js...");

        // Z√≠skame URL podƒæa BASE_URL (mus√≠ by≈• nastaven√° vo Vercel environment variables)
        const mintchainURL = process.env.BASE_URL ? `${process.env.BASE_URL}/api/mintchain` : `http://localhost:3000/api/mintchain`;

        log("üîó [CHAINWEBHOOK] Volanie na URL:", mintchainURL);

        // Volanie API na mintchain.js
        const mintResponse = await fetch(mintchainURL, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({
                metadataURI,
                crop_id,
                wallet
            })
        });

        const mintResult = await mintResponse.json();
        log("üì§ [CHAINWEBHOOK] V√Ωsledok mintchain.js:", mintResult);

        if (!mintResult.success) {
            log("‚ùå [CHAINWEBHOOK] Chyba pri mintovan√≠ NFT:", mintResult);
            return res.status(500).json({ error: "Chyba pri mintovan√≠ NFT", detail: mintResult });
        }

        log("‚úÖ [CHAINWEBHOOK] NFT √∫spe≈°ne vytvoren√©, transakcia:", mintResult.txHash);

        return res.status(200).json({
            success: true,
            message: "NFT vytvoren√©",
            txHash: mintResult.txHash
        });

    } catch (err) {
        log("‚ùå [CHAINWEBHOOK ERROR]", err.message);
        return res.status(500).json({ error: "Intern√° chyba servera", detail: err.message });
    }
}