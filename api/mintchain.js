import { ethers } from 'ethers'; // Spr√°vne importovanie ethers kni≈ænice

const log = (...args) => console.log(`[${new Date().toISOString()}]`, ...args);

function encodeFunctionCall(uri, crop, to) {
  const methodID = '0x0f1320cb';

  // Hexlifikujeme √∫daje do spr√°vneho form√°tu
  const uriHex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(uri)).padEnd(66, '0');
  const cropHex = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(crop)).padEnd(66, '0');
  const addrHex = ethers.utils.getAddress(to).replace(/^0x/, '').padStart(64, '0');

  // Spoj√≠me v≈°etky zak√≥dovan√© hodnoty do jedn√©ho hex stringu
  const fullData = methodID + uriHex + cropHex + addrHex;

  log('Encoded data:', fullData);
  return fullData;
}

// Funkcia pre testovanie a vykonanie transakcie
export default async function (req, res) {
  log('=============================================');
  log('üîó MINTCHAIN INIT...');

  if (req.method !== 'POST') {
    log('‚ùå Nepodporovan√° HTTP met√≥da:', req.method);
    return res.status(405).json({ error: 'Only POST allowed' });
  }

  const { metadataURI, crop_id, walletAddress } = req.body;

  log('üì• PRIJAT√â PARAMETRE:');
  log('   - metadataURI:', metadataURI);
  log('   - crop_id:', crop_id);
  log('   - walletAddress:', walletAddress);

  if (!metadataURI || !crop_id || !walletAddress) {
    log('‚ö†Ô∏è Ne√∫pln√© √∫daje');
    return res.status(400).json({ error: 'Missing metadataURI, crop_id or walletAddress' });
  }

  if (!ethers.utils.isAddress(walletAddress)) {
    log('‚ö†Ô∏è Neplatn√° adresa:', walletAddress);
    return res.status(400).json({ error: 'Invalid wallet address format' });
  }

  const PRIVATE_KEY = process.env.PRIVATE_KEY?.replace(/^0x/, '');
  const FROM = process.env.FROM_ADDRESS;
  const TO = process.env.CONTRACT_ADDRESS;
  const PROVIDER_URL = process.env.PROVIDER_URL;

  if (!PRIVATE_KEY || !FROM || !TO || !PROVIDER_URL) {
    log('‚ùå Ch√Ωbaj√∫ environment premenn√©');
    return res.status(500).json({ error: 'Missing environment variables' });
  }

  log('üîê ENVIRONMENT:');
  log('   - FROM:', FROM);
  log('   - TO:', TO);
  log('   - PROVIDER:', PROVIDER_URL.slice(0, 40) + '...');

  try {
    const provider = new ethers.providers.JsonRpcProvider(PROVIDER_URL);
    const nonce = await provider.getTransactionCount(FROM, 'latest');
    const gasPrice = await provider.getGasPrice();

    log('‚õΩÔ∏è PLYN: nonce =', nonce, ', gasPrice =', gasPrice);

    const data = encodeFunctionCall(metadataURI, crop_id, walletAddress);

    const tx = {
      nonce,
      gasLimit: 250000, // Nastav vlastn√Ω gas limit
      gasPrice,
      to: TO,
      data,
      value: ethers.BigNumber.from(0),
    };

    const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
    const signedTx = await wallet.signTransaction(tx);

    log('üöÄ Posielam transakciu...');
    const txHash = await provider.sendTransaction(signedTx);
    log('‚úÖ TX hash:', txHash);

    log('‚è≥ ƒåakanie na potvrdenie...');
    const receipt = await txHash.wait();
    log('üì¶ Potvrden√°: blockNumber =', receipt.blockNumber);

    return res.status(200).json({
      success: true,
      txHash: txHash.hash,
      recipient: walletAddress,
      metadataURI,
      receipt
    });

  } catch (err) {
    log('‚ùå V√Ωnimka:', err.message);
    return res.status(500).json({ error: err.message });
  }
}