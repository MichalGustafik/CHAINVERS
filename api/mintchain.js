export default async function handler(req, res) {
  const now = new Date().toISOString();
  const log = (...args) => console.log(`[${now}]`, ...args);

  if (req.method !== "POST") {
    log("‚ùå [MINTCHAIN] Nepodporovan√° met√≥da:", req.method);
    return res.status(405).json({ error: "Method Not Allowed" });
  }

  try {
    const { metadataURI, crop_id, wallet } = req.body;
    log("üì• [MINTCHAIN] D√°ta:", { metadataURI, crop_id, wallet });

    // üîê Z√≠skanie √∫dajov z ENV
    const rpcUrl = process.env.PROVIDER_URL;
    const privateKey = process.env.PRIVATE_KEY;
    const contractAddress = process.env.CONTRACT_ADDRESS;

    if (!rpcUrl || !privateKey || !contractAddress) {
      throw new Error("Ch√Ωbaj√∫ environment variables");
    }

    // üì° Pr√≠prava JSON RPC po≈æiadavky (Infura)
    const callData = {
      jsonrpc: "2.0",
      method: "eth_sendRawTransaction",
      params: ["0x..."], // Tu bude hex podp√≠san√° transakcia (implement√°cia bez kni≈æn√≠c je rozsiahlej≈°ia)
      id: 1,
    };

    log("üöÄ [MINTCHAIN] Posielam po≈æiadavku cez Infura...");
    const response = await fetch(rpcUrl, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(callData),
    });

    const json = await response.json();
    if (!json.result) {
      throw new Error(`Chyba RPC: ${JSON.stringify(json.error || json)}`);
    }

    log("‚úÖ [MINTCHAIN] TX hash:", json.result);

    return res.status(200).json({ success: true, txHash: json.result });
  } catch (err) {
    log("‚ùå [MINTCHAIN ERROR]", err.message);
    return res.status(500).json({ success: false, error: err.message });
  }
}