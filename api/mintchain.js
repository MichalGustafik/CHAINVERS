// Importujeme potrebn√© moduly
export default async function handler(req, res) {
    const now = new Date().toISOString();
    const log = (...args) => console.log(`[${now}]`, ...args);

    // Skontrolujeme, ƒçi je po≈æiadavka POST
    if (req.method !== "POST") {
        log("‚ùå [CHYBA] Nepodporovan√° HTTP met√≥da:", req.method);
        return res.status(405).json({ error: "Method Not Allowed" });
    }

    try {
        // Z√≠skame d√°ta z tela po≈æiadavky
        const { metadataURI, walletAddress, crop_id } = req.body;

        // Skontrolujeme, ƒçi s√∫ v≈°etky potrebn√© parametre
        if (!metadataURI || !walletAddress || !crop_id) {
            log("‚ö†Ô∏è [MINTCHAIN] Ch√Ωbaj√∫ parametre metadataURI, walletAddress alebo crop_id.");
            return res.status(400).json({ error: "Missing required parameters" });
        }

        // Z√≠skanie environment√°lnych premenn√Ωch
        const providerUrl = process.env.PROVIDER_URL; // URL na Infura alebo Alchemy
        const privateKey = process.env.PRIVATE_KEY; // Priv√°tny kƒæ√∫ƒç pe≈àa≈æenky
        const contractAddress = process.env.CONTRACT_ADDRESS; // Adresa smart kontraktu

        if (!providerUrl || !privateKey || !contractAddress) {
            log("‚ö†Ô∏è [MINTCHAIN] Ch√Ωbaj√∫ potrebn√© environment√°lne premenn√©.");
            return res.status(400).json({ error: "Missing environment variables" });
        }

        log("üìä [INFURA] Inicializ√°cia providera...");

        // Inicializ√°cia pripojenia cez Infura (alebo Alchemy)
        const provider = new ethers.JsonRpcProvider(providerUrl);
        const signer = new ethers.Wallet(privateKey, provider);

        // Z√≠skanie aktu√°lneho zostatku pe≈àa≈æenky
        const balance = await provider.getBalance(signer.address);
        log("üí∞ [BALANCE] Pe≈àa≈æenka m√°:", ethers.utils.formatEther(balance), "ETH");

        // Skontrolovanie, ƒçi je dostatok ETH na zaplatenie poplatkov za gas
        if (balance.lte(ethers.utils.parseEther("0.0001"))) {
            return res.status(400).json({ error: "Nedostatoƒçn√Ω zostatok pre gas" });
        }

        // Definovanie ABI pre smart kontrakt
        const contractABI = [
            "function createOriginal(string memory imageURI, string memory cropId, address to) public"
        ];

        // Vytvorenie in≈°tancie smart kontraktu
        const contract = new ethers.Contract(contractAddress, contractABI, signer);

        log("üì§ [ETHERS] Odosielam transakciu na mintovanie...");

        // Odoslanie transakcie na blockchain
        const tx = await contract.createOriginal(metadataURI, crop_id, walletAddress);

        log("üìä [ETHERS] Transakcia odoslan√°, ƒçak√°m na potvrdenie...");

        // ƒåakanie na potvrdenie transakcie
        const receipt = await tx.wait();

        log("‚úÖ [ETHERS] Transakcia potvrden√°:", receipt.transactionHash);

        // Vr√°tenie transakƒçn√©ho hashu ako odpoveƒè
        return res.status(200).json({ success: true, txHash: receipt.transactionHash });
    } catch (err) {
        log("‚ùå [MINTCHAIN ERROR]", err.message);
        return res.status(500).json({ success: false, error: err.message });
    }
}